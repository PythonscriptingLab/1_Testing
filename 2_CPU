#!/bin/bash

# Helper function for headers with clear separation
print_header() {
    echo
    echo "====== $1 ======"
    echo
}

# Capture date and time
DATE=$(date '+%Y-%m-%d %H:%M:%S')
TIMESTAMP=$(date '+%Y%m%d_%H%M%S')
OUTPUT_DIR="/tmp/CPU_Utilization"
OUTPUT_FILE="$OUTPUT_DIR/CPU_Utilization_$TIMESTAMP.txt"

# Create directory if not exists
[ ! -d "$OUTPUT_DIR" ] && mkdir -p "$OUTPUT_DIR"

# Capture general system information
HOSTNAME=$(hostname)
CPU_USAGE_TOP=$(top -b -n1 | grep "Cpu(s)" | awk '{print $2 + $4}')
CPU_USAGE_VMSTAT=$(vmstat 1 2 | tail -1 | awk '{print $13+$14}')
MPSTAT_OUTPUT=$(mpstat -P ALL 1 1)
IOSTAT_OUTPUT=$(iostat -c 1 1)
PROC_STAT=$(cat /proc/stat | grep '^cpu ' | awk '{usage=($2+$4)*100/($2+$4+$5)} END {print usage}')
DISK_USAGE=$(df -h / | grep / | awk '{print $5}')
MEMORY_USAGE=$(free -h | grep "Mem:" | awk '{print "Total: "$2", Used: "$3", Free: "$4}')
UPTIME=$(uptime -p)
LOAD_AVG=$(uptime | awk -F'load average:' '{ print $2 }')
TCP_CONNECTIONS=$(ss -t | wc -l)
RUNNING_PROCESSES=$(ps -e --no-headers | wc -l)
TOP_FID_CPU=$(ps -eo user,%cpu --sort=-%cpu | awk '{cpu[$1]+=$2} END {for (u in cpu) print u, cpu[u]}' | sort -k2 -nr | head -n 5)

{
    echo
    echo "Report generated on: [$DATE] for Hostname: $HOSTNAME"
    
    print_header "CPU Utilization (top)"
    echo "Current CPU Usage: $CPU_USAGE_TOP%"
    echo
    
    print_header "CPU Utilization (vmstat)"
    echo "CPU Usage (vmstat): $CPU_USAGE_VMSTAT%"
    echo
    
    print_header "Disk Usage"
    echo "Disk Usage of Root Partition: $DISK_USAGE"
    echo
    
    print_header "Memory Usage"
    echo "$MEMORY_USAGE"
    echo
    
    print_header "System Uptime and Load Average"
    echo "Uptime: $UPTIME"
    echo "Load Average: $LOAD_AVG"
    echo
    
    print_header "TCP Connections and Running Processes"
    echo "Active TCP Connections: $TCP_CONNECTIONS"
    echo "Running Processes: $RUNNING_PROCESSES"
    echo
    
    print_header "Top 5 Memory-Consuming Processes"
    ps aux --sort=-%mem | awk '{print $2, $4, substr($0, index($0, $11))}' | head -n 6 | while read -r pid mem cmd; do
        echo "PID: $pid | MEM: $mem%"
        echo "Command: $(echo "$cmd" | cut -c 1-300)"
        echo "*****"
    done
    echo
    
    print_header "Top 5 CPU-Consuming Processes"
    ps aux --sort=-%cpu | awk '{print $2, $3, substr($0, index($0, $11))}' | head -n 6 | while read -r pid cpu cmd; do
        echo "PID: $pid | CPU: $cpu%"
        echo "Command: $(echo "$cmd" | cut -c 1-300)"
        echo "*****"
    done
    echo
    
    print_header "Per-Core CPU Utilization"
    echo "$MPSTAT_OUTPUT"
    echo
    
    print_header "Detailed CPU Stats (iostat)"
    echo "$IOSTAT_OUTPUT"
    echo
    
    print_header "CPU Usage from /proc/stat"
    echo "CPU Usage: $PROC_STAT%"
    echo
} | tee "$OUTPUT_FILE"

# Show top FIDs and prompt for user input
echo
print_header "Top 5 FIDs by Total CPU Utilization"
echo "No.  FID         Total CPU%"
echo "$TOP_FID_CPU" | nl -w2 -s'. '
echo

read -p "Select an FID by entering the corresponding number: " FID_SELECTION
SELECTED_FID=$(echo "$TOP_FID_CPU" | sed -n "${FID_SELECTION}p" | awk '{print $1}')

echo
print_header "Top 10 CPU-consuming processes for FID '$SELECTED_FID'"
# Display truncated command line for readability and save full command to file
ps -u "$SELECTED_FID" --sort=-%cpu -o pid,%cpu,cmd | head -n 10 | while read -r pid cpu cmd; do
    echo "PID: $pid | CPU: $cpu%"
    echo "Command: $(echo "$cmd" | cut -c 1-300)"
    echo "*****"
    echo "$pid $cpu $cmd" >> "$OUTPUT_FILE" # Save full command to file
done
print_header "End of Report"
echo "Detailed information saved to: $OUTPUT_FILE"
